require "spec_helper"

module Refinery

    describe "AdminImages", type: :feature do
      refinery_login_with :refinery_user

      context 'always' do
        it "shows add new image link" do
          visit refinery.admin_images_path
          expect(page).to have_content(::I18n.t('create_new_image', scope: 'refinery.admin.images.actions'))
          expect(page).to have_selector("a[href*='#{refinery.new_admin_image_path}']")
        end
      end

      context "when there are no images" do
        it 'says there are no images'do
          visit_admin_images_page
          expect(page).to have_content(::I18n.t('no_images_yet', scope: 'refinery.admin.images.records'))
        end
      end

      context "when images exist" do
        describe "switch view" do
          it "shows images in grid" do
            visit_admin_images_page
            expect(page).to have_content(::I18n.t('switch_to', view_name: 'list', scope: 'refinery.admin.images.index.view'))
            expect(page).to have_selector("a[href='#{refinery.admin_images_path(view: 'list')}']")

            click_link "Switch to list view"  #Refinery::Images.preferred_image_view

            expect(page).to have_content(::I18n.t('switch_to', view_name: 'grid', scope: 'refinery.admin.images.index.view'))
            expect(page).to have_selector("a[href='#{refinery.admin_images_path(view: 'grid')}']")
          end
        end
      end

      describe 'Image Upload Dialogue' do
        it 'brings up the dialog' do
          trigger_add_image_dialog
          expect(page).to have_selector 'iframe#dialog_iframe'
        end

        describe "Upload an image" do

          context 'with default values' do

            it "creates an image" do
              trigger_add_image_dialog
              upload_an_image('image-with-dashes.jpg')

              expect(Refinery::Image.count).to eq(1)
              expect(page).to have_content(::I18n.t('created', scope: 'refinery.crudify', what: "'Image With Dashes'"))
              expect(Refinery::Image.where(title: 'Image With Dashes', alt: 'Image With Dashes')).to exist
            end
          end

          context 'Enter title and alt values' do

            it 'uses supplied title and alt fields' do
              trigger_add_image_dialog
              upload_an_image('image-with-dashes.jpg', 'Image Title', 'Image Alt')
              expect(Refinery::Image.where(title: 'Image Title', alt: 'Image Alt')).to exist
            end
          end

          it "cannot upload a pdf" do
            trigger_add_image_dialog
            page.within_frame('dialog_iframe') do
              upload_an_image('cape-town-tide-table.pdf')
              expect(page).to have_content(::I18n.t('incorrect_format', scope: 'activerecord.errors.models.refinery/image'))
            end
            expect(Refinery::Image.count).to eq(0)
          end
        end  #
      end

      context "new/create - insert mode" do
        it "uploads image", js: true do
          visit refinery.insert_admin_images_path(modal: true, wymeditor: true)

          attach_file "image_image", Refinery.roots('refinery/images').join("spec/fixtures/image-with-dashes.jpg")
          click_button ::I18n.t('save', scope: 'refinery.admin.form_actions')

          expect(page).to have_selector('#existing_image_area', visible: true)
          expect(Refinery::Image.count).to eq(1)
        end

        it "gets error message when uploading non-image", js: true do
          visit refinery.insert_admin_images_path(modal: true, wymeditor: true)

          attach_file "image_image", Refinery.roots('refinery/images').join("spec/fixtures/cape-town-tide-table.pdf")
          click_button ::I18n.t('save', scope: 'refinery.admin.form_actions')

          expect(page).to have_selector('#upload_image_area', visible: true)
          expect(page).to have_content(::I18n.t('incorrect_format', scope: 'activerecord.errors.models.refinery/image'))
          expect(Refinery::Image.count).to eq(0)
        end

        it "gets error message when uploading non-image (when an image already exists)", js: true do
          FactoryGirl.create(:image)
          visit refinery.insert_admin_images_path(modal: true, wymeditor: true)

          choose 'Upload'
          attach_file "image_image", Refinery.roots('refinery/images').join("spec/fixtures/cape-town-tide-table.pdf")
          click_button ::I18n.t('save', scope: 'refinery.admin.form_actions')

          expect(page).to have_selector('#upload_image_area', visible: true)
          expect(page).to have_content(::I18n.t('incorrect_format', scope: 'activerecord.errors.models.refinery/image'))
          expect(Refinery::Image.count).to eq(1)
        end
      end

      context "when an image exists" do
        let!(:image) { FactoryGirl.create(:image) }

        context "edit/update" do
          it "updates image" do
            visit refinery.admin_images_path
            expect(page).to have_selector("a[href='#{refinery.edit_admin_image_path(image)}']")

            click_link ::I18n.t('edit', scope: 'refinery.admin.images')

            expect(page).to have_content("Use current image or replace it with this one...")
            expect(page).to have_selector("a[href*='#{refinery.admin_images_path}']")

            attach_file "image_image", Refinery.roots('refinery/images').join("spec/fixtures/beach.jpeg")
            click_button ::I18n.t('save', scope: 'refinery.admin.form_actions')

            expect(page).to have_content(::I18n.t('updated', scope: 'refinery.crudify', what: "'Beach'"))
            expect(Refinery::Image.count).to eq(1)

            expect { click_link "View this image" }.not_to raise_error
          end

          it "doesn't allow updating if image has different file name" do
            visit refinery.edit_admin_image_path(image)

            attach_file "image_image", Refinery.roots('refinery/images').join("spec/fixtures/fathead.png")
            click_button ::I18n.t('save', scope: 'refinery.admin.form_actions')

            expect(page).to have_content(::I18n.t("different_file_name",
                                              scope: "activerecord.errors.models.refinery/image"))
          end
        end

        context "page" do
          # Regression test for #2552 (https://github.com/refinery/refinerycms/issues/2552)
          let :page_for_image do
            page = Refinery::Page.create title: "Add Image to me"
            # we need page parts so that there's a visual editor
            Refinery::Pages.default_parts.each_with_index do |default_page_part, index|
              page.parts.create(title: default_page_part, body: nil, position: index)
            end
            page
          end
          it "can add an image to a page and update the image", js: true do
            visit refinery.edit_admin_page_path(page_for_image)

            # add image to the page
            expect(page.body).to match(/Add Image/)
            click_link 'Add Image'
            expect(page).to have_selector 'iframe#dialog_frame'
            page.within_frame('dialog_frame') do
              find(:css, "#existing_image_area img#image_#{image.id}").click
              find(:css, '#existing_image_size_area #image_dialog_size_0').click
              click_button ::I18n.t('button_text', scope: 'refinery.admin.images.existing_image')
            end
            click_button "Save"

            # check that image loads after it has been updated
            visit refinery.url_for(page_for_image.url)
            visit find(:css, 'img[src^="/system/images"]')[:src]
            expect(page).to have_css('img[src*="/system/images"]')
            expect { page }.to_not have_content('Not found')

            # update the image
            visit refinery.edit_admin_image_path(image)
            attach_file "image_image", Refinery.roots('refinery/images').join("spec/fixtures/beach.jpeg")
            click_button "Save"

            # check that image loads after it has been updated
            visit refinery.url_for(page_for_image.url)
            visit find(:css, 'img[src^="/system/images"]')[:src]
            expect(page).to have_css('img[src*="/system/images"]')
            expect { page }.to_not have_content('Not found')
          end
        end

        context "destroy" do
          it "removes image" do
            visit refinery.admin_images_path
            expect(page).to have_selector("a[href='#{refinery.admin_image_path(image)}']")

            click_link ::I18n.t('delete', scope: 'refinery.admin.images')

            expect(page).to have_content(::I18n.t('destroyed', scope: 'refinery.crudify', what: "'Beach'"))
            expect(Refinery::Image.count).to eq(0)
          end
        end

        context "download" do
          it "succeeds" do
            visit refinery.admin_images_path

            expect { click_link "View this image" }.not_to raise_error
          end
        end

      end
    end
  end
